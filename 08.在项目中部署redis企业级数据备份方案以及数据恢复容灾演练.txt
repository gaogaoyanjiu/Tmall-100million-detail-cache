企业级的数据备份和各种灾难下的数据恢复，是怎么做得呢？

1、企业级的持久化的配置策略

在企业中，RDB的生成策略，用默认的也差不多

save 60 10000：如果你希望尽可能确保说，RDB最多丢1分钟的数据，那么尽量就是每隔1分钟都生成一个快照，低峰期，数据量很少，也没必要

10000->生成RDB，1000->RDB，这个根据你自己的应用和业务的数据量，你自己去决定

AOF一定要打开，fsync，everysec

auto-aof-rewrite-percentage 100: 就是当前AOF大小膨胀到超过上次100%，上次的两倍
auto-aof-rewrite-min-size 64mb: 根据你的数据量来定，16mb，32mb

2、企业级的数据备份方案

RDB非常适合做冷备，每次生成之后，就不会再有修改了


数据备份方案

（1）写crontab定时调度脚本去做数据备份
（2）每小时都copy一份rdb的备份，到一个目录中去，仅仅保留最近48小时的备份
（3）每天都保留一份当日的rdb的备份，到一个目录中去，仅仅保留最近1个月的备份
（4）每次copy备份的时候，都把太旧的备份给删了
（5）每天晚上将当前服务器上所有的数据备份，发送一份到远程的云服务上去


每小时copy一次备份，删除48小时前的数据

crontab -e

0 * * * * sh /usr/local/redis/copy/redis_rdb_copy_hourly.sh

/usr/local/redis/copy/ 目录下 创建按照小时备份脚本文件：redis_rdb_copy_hourly.sh

##############################################################################################################################

#!/bin/sh
# 按照小时备份redis数据脚本

# 当前日期包含小时
cur_date=`date +%Y%m%d%k`

# 删除当前日期旧的数据，以防万一
rm -rf /usr/local/redis/snapshotting/$cur_date

# 创建日期为分类新的文件目录
mkdir -p /usr/local/redis/snapshotting/$cur_date

# 备份rdb文件到指定位置
cp /var/redis/6379/dump.rdb /usr/local/redis/snapshotting/$cur_date

# 删除48小时以前的数据
del_date=`date -d -48hour +%Y%m%d%k`

# 执行删除
rm -rf /usr/local/redis/snapshotting/$del_date


##############################################################################################################################

设置执行权限：chmod 777 redis_rdb_copy_hourly.sh

自己测试：
[root@eshop-cache01 snapshotting]# date +%Y%m%d%k
2018110616
[root@eshop-cache01 snapshotting]# date -d -48hour +%Y%m%d%k
2018110416
[root@eshop-cache01 snapshotting]#

根据日期创建：2018110416/dump.rdb

手动执行shell脚本：./redis_rdb_copy_hourly.sh

此时会删除2018110416/dump.rdb 而创建2018110616/dump.rdb

查看：cat 2018110616/dump.rdb


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

每天copy一次备份

crontab -e

0 0 * * * sh /usr/local/redis/copy/redis_rdb_copy_daily.sh

/usr/local/redis/copy/ 目录下 创建脚本文件：redis_rdb_copy_daily.sh


##############################################################################################################################

#!/bin/sh 
# 按照天备份redis数据脚本

cur_date=`date +%Y%m%d`

# 删除当前日期旧的数据，以防万一
rm -rf /usr/local/redis/snapshotting/$cur_date

# 创建日期为分类新的文件目录
mkdir /usr/local/redis/snapshotting/$cur_date

# 备份rdb文件到指定位置
cp /var/redis/6379/dump.rdb /usr/local/redis/snapshotting/$cur_date

# 删除1个月以前的数据
del_date=`date -d -1month +%Y%m%d`

# 执行删除
rm -rf /usr/local/redis/snapshotting/$del_date

##############################################################################################################################

设置执行权限：chmod 777 redis_rdb_copy_daily.sh

自己测试：
[root@eshop-cache01 ~]# date +%Y%m%d
20181106
[root@eshop-cache01 ~]# date -d -1month +%Y%m%d 
20181006
[root@eshop-cache01 ~]#

根据日期创建：20181006/dump.rdb

手动执行shell脚本：./redis_rdb_copy_daily.sh

此时会删除20181006/dump.rdb 而创建20181106/dump.rdb

查看：cat 20181106/dump.rdb

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

每天一次将所有数据上传一次到远程的云服务器上去



3、数据恢复方案

（1）如果是redis进程挂掉，那么重启redis进程即可，直接基于AOF日志文件恢复数据

不演示了，在AOF数据恢复那一块，演示了，fsync everysec，最多就丢一秒的数据

（2）如果是redis进程所在机器挂掉，那么重启机器后，尝试重启redis进程，尝试直接基于AOF日志文件进行数据恢复

AOF没有破损，也是可以直接基于AOF恢复的

AOF append-only，顺序写入，如果AOF文件破损，那么用redis-check-aof fix

（3）如果redis当前最新的AOF和RDB文件出现了丢失/损坏，那么可以尝试基于该机器上当前的某个最新的RDB数据副本进行数据恢复

当前最新的AOF和RDB文件都出现了丢失/损坏到无法恢复，一般不是机器的故障，人为

大数据系统，hadoop，有人不小心就把hadoop中存储的大量的数据文件对应的目录，rm -rf一下，我朋友的一个小公司，运维不太靠谱，权限也弄的不太好

/var/redis/6379下的文件给删除了

找到RDB最新的一份备份，小时级的备份可以了，小时级的肯定是最新的，copy到redis里面去，就可以恢复到某一个小时的数据

容灾演练

appendonly.aof + dump.rdb，优先用appendonly.aof去恢复数据，但是我们发现redis自动生成的appendonly.aof是没有数据的

然后我们自己的dump.rdb是有数据的，但是明显没用我们的数据

redis启动的时候，自动重新基于内存的数据，生成了一份最新的rdb快照，直接用空的数据，覆盖掉了我们有数据的，拷贝过去的那份dump.rdb

问题一：

你停止redis之后，其实应该先删除appendonly.aof，然后将我们的dump.rdb拷贝过去，然后再重启redis

很简单，就是虽然你删除了appendonly.aof，但是因为打开了aof持久化，redis就一定会优先基于aof去恢复，即使文件不在，那就创建一个新的空的aof文件

停止redis，暂时在配置中关闭aof，然后拷贝一份rdb过来，再重启redis，数据能不能恢复过来，可以恢复过来。

问题二：

脑子一热，再关掉redis，手动修改配置文件，打开aof，再重启redis，数据又没了，空的aof文件，所有数据又没了

在数据安全丢失的情况下，基于rdb冷备，如何完美的恢复数据，同时还保持aof和rdb的双开

停止redis，关闭aof，拷贝rdb备份，重启redis，确认数据恢复，直接在命令行热修改redis配置，打开aof，这个redis就会将内存中的数据对应的日志，写入aof文件中

此时aof和rdb两份数据文件的数据就同步了

redis 的 config set 热修改配置参数 （config set appendonly yes），可能配置文件中的实际的参数没有被持久化的修改，再次停止redis，手动修改配置文件（vi /etc/redis/6379.conf），打开aof的命令，再次重启redis

（4）如果当前机器上的所有RDB文件全部损坏，那么从远程的云服务上拉取最新的RDB快照回来恢复数据

（5）如果是发现有重大的数据错误，比如某个小时上线的程序一下子将数据全部污染了，数据全错了，那么可以选择某个更早的时间点，对数据进行恢复

举个例子，12点上线了代码，发现代码有bug，导致代码生成的所有的缓存数据，写入redis，全部错了

找到一份11点的rdb的冷备，然后按照上面的步骤，去恢复到11点的数据，就ok了


----------------------------------------------------------------------------------------------------------------------------------


在Linux Shell编程中，经常用到日期的加减运算

以前都是自己通过expr函数计算，很麻烦，其实date命令本身提供了日期的加减运算，非常方便。例如：得到昨天的时间
date +%Y%m%d --date="-1 day"
date 用法： date [OPTION]... [+FORMAT]
date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]
date 可以用来显示或设定系统的日期与时间。

1.在显示方面，使用者可以设定欲显示的格式，格式设定为一个加号后接数个标记，其中可用的标记列表如下: % :  打印出 %
%n : 下一行
%t : 跳格
%H : 小时(00..23)
%I : 小时(01..12)
%k : 小时(0..23)
%l : 小时(1..12)
%M : 分钟(00..59)
%p : 显示本地 AM 或 PM
%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)
%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数
%S : 秒(00..61)
%T : 直接显示时间 (24 小时制)
%X : 相当于 %H:%M:%S
%Z : 显示时区 %a : 星期几 (Sun..Sat)
%A : 星期几 (Sunday..Saturday)
%b : 月份 (Jan..Dec)
%B : 月份 (January..December)
%c : 直接显示日期与时间
%d : 日 (01..31)
%D : 直接显示日期 (mm/dd/yy)
%h : 同 %b
%j : 一年中的第几天 (001..366)
%m : 月份 (01..12)
%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形)
%w : 一周中的第几天 (0..6)
%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形)
%x : 直接显示日期 (mm/dd/yy)
%y : 年份的最后两位数字 (00.99)
%Y : 完整年份 (0000..9999)

2.在设定时间方面
date -s //设置当前时间，只有root权限才能设置，其他只能查看。
date -s 200161123 //设置成200161123，这样会把具体时间设置成空00:00:00
date -s 01:01:01 //设置具体时间，不会对日期做更改
date -s “01:01:01 2016-11-23″ //这样可以设置全部时间
date -s “01:01:01 200161123″ //这样可以设置全部时间
date -s “2016-11-23 01:01:01″ //这样可以设置全部时间
date -s “200161123 01:01:01″ //这样可以设置全部时间

3.加减
date +%Y%m%d        //显示前天年月日
date +%Y%m%d --date="+1 day"  //显示前一天的日期
date +%Y%m%d --date="-1 day"  //显示后一天的日期
date +%Y%m%d --date="-1 month"  //显示上一月的日期
date +%Y%m%d --date="+1 month"  //显示下一月的日期
date +%Y%m%d --date="-1 year"  //显示前一年的日期
date +%Y%m%d --date="+1 year"  //显示下一年的日期